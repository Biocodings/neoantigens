#!/usr/bin/env python
import os
import sys
from os.path import isfile, join, dirname, abspath, relpath
from pathlib import Path
import click
import csv
import subprocess

from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import verify_file, safe_mkdir, verify_dir
from ngs_utils import logger
from ngs_utils.logger import warn, info
from ngs_utils.snakemake_utils import prep_resources, make_cluster_cmdl, run_snakemake
from ngs_utils.utils import set_locale; set_locale()
from ngs_utils import snakemake_utils
from reference_data import api as refdata
from nag import package_path


@click.command()
@click.option('-i', '--input-tsv', 'input_tsv', type=click.Path(),
              help='TSV file with inputs. Format: sample<TAB>rna_sample<TAB>rna_bcbio<TAB>somatic_vcf<TAB>optitype_file')
@click.option('-v', '--somatic-vcf', 'somatic_vcf', type=click.Path())
@click.option('-s', '--sample', 'samples', multiple=True,
              help='Sample name for the single-sample input, or sample names to include for multi-sample inputs, '
                   'e.g.: -s SAMPLE1 -s BATCH2')
@click.option('-e', '--exclude', 'exclude', multiple=True,
              help='For multi-sample inputs: samples to ignore, e.g.: -e SAMPLE1 -e BATCH2')
@click.option('-R', '--rna-bcbio', 'rna_bcbio', type=click.Path())
@click.option('-r', '--rna-sample', 'rna_sample')
@click.option('-O', '--optitype-file', 'optitype_file')
@click.option('-T', '--target', 'include_stages', multiple=True,
              help='Optionally, specific stage to run')
@click.option('-E', '--skip-target', 'exclude_stages', multiple=True,
              help='Optionally, stages to skip, e.g.: -E oncoviruses -E cpsr')
@click.option('-o', 'output_dir', type=click.Path(), help='Output directory (default is "umccrise")')
@click.option('--ensembl-release', 'ensembl_release')
@click.option('--pizzly-ref-fa', 'pizzly_ref_fa', type=click.Path(), help='Pizzly transcriptome fasta reference for requantification,'
              'e.g. /g/data/gx8/projects/Saveliev_APGI/LTS/RNA/local_rnaseq/work/pizzly/hg38-noversions.fa')
@click.option('--min-tvaf',
              help='Miniaml AF of tumor mutations (both in DNA and RNA). Default is 10 (%). '
                   'Set if you know sample tumor purity.')
@click.option('--genomes', '--genomes-dir', 'input_genomes_url', help='Path to the reference data. Can be s3 or gds')

# Cluster
@click.option('-t', '--threads', '-j', '--jobs', '--cores', 'cores', type=click.INT,
              help='Maximum number of cores to use at single time (works both for local and cluster runs)')
@click.option('-c', '--cluster-auto', 'cluster', is_flag=True, help='Submit jobs to cluster')

# Debug and snakemake
@click.option('--debug', 'debug', is_flag=True, help='More verboe messages. Also sets restart times to 0.')
@click.option('--unlock', 'unlock', is_flag=True,
              help='Use when you are rerunning after Ctrl+C or an error. Propagated to snakemake.')
@click.option('-r', '--restarts', '--restart-times', 'restart_times',
              help=f'How many times to try out rerunning rules if they fail. "--restart-times 1" means that the rule '
                   f'will be attempted maximum 1 time. Default is {snakemake_utils.DEFAULT_RESTART_TIMES}. The value ropagated '
                   f'to snakemake is decremented, because snakemake interprets it as "how many times to restart after '
                   f'the rule is failed").')
@click.option('-n', '--dryrun', 'dryrun', is_flag=True,
              help='Propagated to snakemake. Prints rules and commands to be run without actually executing them.')
@click.option('--report', 'report',
              help='Propagated to snakemake. Create an HTML report with results and statistics. '
                   'The argument has to be a file path ending with ".html".')
@click.option('--dag', 'dag', is_flag=True,
              help='Propagated to snakemake. Print the DAG of jobs in the dot language. '
                   'Example usage: umccrise --dag > tmp.txt; cat <cleaned-tmp.txt> | dot -Tsvg > dag.svg')
@click.option('--resources', 'hpc_resources',
              help='Can be used to limit the amount of memory allowed to be used, e.g.: --resources mem_mb=1000.'
                   'Propagated to snakemake.')

def main(input_tsv, somatic_vcf, samples=None, exclude=None, rna_bcbio=None, rna_sample=None, optitype_file=None,
         include_stages:list = None, exclude_stages:list = None, output_dir=None,
         ensembl_release=None, pizzly_ref_fa=None, min_tvaf=None,
         input_genomes_url=None,
         cores=None, cluster=False, debug=False, unlock=False, restart_times=None,
         dryrun=False, report=None, dag=False, hpc_resources=None):

    output_dir = output_dir or 'neoantigens'
    output_dir = safe_mkdir(abspath(output_dir))
    log_dir = safe_mkdir(join(output_dir, 'log'))
    logger.init(log_fpath_=join(log_dir, 'neoantigens.log'), save_previous=True)

    conf = dict()

    # check hpc_utils can find the genomes dir, and error out if not
    genomes_dir = refdata.find_genomes_dir(input_genomes_url)
    conf['genomes_dir'] = genomes_dir

    num_samples = 0
    if input_tsv:
        conf['input_tsv'] = verify_file(input_tsv)
        if samples:
            conf['include'] = ','.join(samples)
        if exclude:
            conf['exclude'] = ','.join(exclude)

        with open(input_tsv) as f:
            csv_reader = csv.DictReader(f, delimiter='\t')
            for e in csv_reader:
                if samples and e['sample'] not in samples:
                    continue
                if exclude and e['sample'] in exclude:
                    continue
                num_samples += 1

    else:
        num_samples = 1
        conf['sample'] = samples[0]
        conf['somatic_vcf'] = verify_file(somatic_vcf)
        conf['optitype_file'] = verify_file(optitype_file)
        if rna_sample and rna_bcbio:
            conf['rna_sample'] = rna_sample
            conf['rna_bcbio'] = rna_bcbio
        else:
            if 'pvacfuse' in include_stages:
                logger.critical('Cannot run pVACfuse without RNA data')
            include_stages = ['pvacseq']

    if ensembl_release:
        conf['ensembl_release'] = ensembl_release
    elif os.environ.get('ENSEMBL_VERSION'):
        conf['ensembl_release'] = os.environ.get('ENSEMBL_VERSION')

    if pizzly_ref_fa:
        conf['pizzly_ref_fa'] = pizzly_ref_fa
    elif os.environ.get('PIZZLY_REF_FA'):
        conf['pizzly_ref_fa'] = os.environ.get('PIZZLY_REF_FA')

    if min_tvaf:
        conf['min_tvaf'] = min_tvaf

    cpu_resources = prep_resources(
        num_samples=num_samples,
        ncpus_requested=cores,
        ncpus_per_node=refdata.ncpus_on_node,
        is_cluster=cluster is not None
    )

    cluster_log_dir = join(log_dir, 'cluster')
    if cluster:
        cluster_param = make_cluster_cmdl(cluster_log_dir, refdata, 'neoantigens')
    else:
        cluster_param = None

    snakefile = join(package_path(), 'Snakefile')
    run_snakemake(
        snakefile, conf,
        output_dir=output_dir,
        unlock=unlock,
        dryrun=dryrun,
        restart_times=restart_times,
        debug=debug,
        cores=cpu_resources.ncpus_available,
        local_cores=cpu_resources.ncpus_local,
        ncpus_per_batch=cpu_resources.ncpus_per_batch,
        ncpus_per_sample=cpu_resources.ncpus_per_sample,
        resources=hpc_resources,
        cluster_param=cluster_param,
        log_dir=log_dir,
        cluster_log_dir=cluster_log_dir,
        report=report,
        dag=dag,
    )

    if input_tsv:
        mut_calls_mhc1 = join(output_dir, f'MHC_Class_I/summary_seq.tsv')
        mut_calls_mhc2 = join(output_dir, f'MHC_Class_II/summary_seq.tsv')
        fus_calls_mhc1 = join(output_dir, f'MHC_Class_I/summary_fuse.tsv')
        fus_calls_mhc2 = join(output_dir, f'MHC_Class_II/summary_fuse.tsv')
        if not include_stages or 'pvacseq' in include_stages or 'all' in include_stages:
            mut_calls_mhc1 = verify_file(mut_calls_mhc1, is_critical=True)
            mut_calls_mhc2 = verify_file(mut_calls_mhc2, is_critical=True)
            print(f'SNPs and indels, MHC Class I epitopes: {mut_calls_mhc1}')
            print(f'SNPs and indels, MHC Class II epitopes: {mut_calls_mhc2}')
            # epitopes = []
            # with open(mut_calls_mhc1) as f:
            #     for e in csv.DictReader(f):
            #         epitopes.append(e)
            # logger.info(f'Processed {len(epitopes)} samples, see top epitopes in {summary_tsv}')
        if not include_stages or 'pvacfuse' in include_stages or 'all' in include_stages:
            fus_calls_mhc1 = verify_file(fus_calls_mhc1, is_critical=True)
            fus_calls_mhc2 = verify_file(fus_calls_mhc2, is_critical=True)
            print(f'Fusions, MHC Class I epitopes: {fus_calls_mhc1}')
            print(f'Fusions, MHC Class II epitopes: {fus_calls_mhc2}')
    else:
        sample = samples[0]
        mut_calls_mhc1 = join(output_dir, f'{sample}/pvacseq_results/MHC_Class_I/{sample}.filtered.condensed.ranked.tsv')
        mut_calls_mhc2 = join(output_dir, f'{sample}/pvacseq_results/MHC_Class_II/{sample}.filtered.condensed.ranked.tsv')
        fus_calls_mhc1 = join(output_dir, f'{sample}/pvacfuse_results/MHC_Class_I/{sample}.filtered.condensed.ranked.tsv')
        fus_calls_mhc2 = join(output_dir, f'{sample}/pvacfuse_results/MHC_Class_II/{sample}.filtered.condensed.ranked.tsv')
        if not include_stages or 'pvacseq' in include_stages or 'all' in include_stages:
            _report(mut_calls_mhc1, 'SNPs and indels, MHC Class I',  join(output_dir, 'snps_and_indels_mhcI.tsv'))
            _report(mut_calls_mhc2, 'SNPs and indels, MHC Class II', join(output_dir, 'snps_and_indels_mhcII.tsv'))
        if not include_stages or 'pvacfuse' in include_stages or 'all' in include_stages:
            _report(fus_calls_mhc1, 'Fusions, MHC Class I',  join(output_dir, 'fusions_mhcI.tsv'))
            _report(fus_calls_mhc2, 'Fusions, MHC Class II', join(output_dir, 'fusions_mhcII.tsv'))


def _pvac_seq_tsv_stats(fpath):
    muts = set()
    total_lines = 0
    epitopes = set()
    genes = set()
    hlas = set()

    with open(fpath) as fh:
        try:
            fieldnames = next(fh).strip().split('\t')
        except:  # empty file = no neoantigens called
            pass
        else:
            csv_reader = csv.DictReader(fh, fieldnames=fieldnames)
            for entry in csv_reader:
                total_lines += 1
                epitopes.add(entry['MT Epitope Seq'])
                genes.add(entry['Gene Name'])
                hlas.add(entry['HLA Allele'])

    pre_ranked_fpath = fpath.replace('.filtered.condensed.ranked.tsv', '.filtered.tsv')
    if isfile(pre_ranked_fpath):
        with open(pre_ranked_fpath) as fh:
            try:
                fieldnames = next(fh).strip().split('\t')
            except:  # empty file = no neoantigens called
                pass
            else:
                csv_reader = csv.DictReader(fh, fieldnames=fieldnames)
                for entry in csv_reader:
                    muts.add((entry['Chromosome'], entry['Start'], entry['Stop']))

    return total_lines, len(epitopes), len(muts), len(genes), len(hlas)


def _report(fpath, kind, final_link_path):
    # if not verify_file(fpath, silent=True):
    #     logger.info(f'{kind}: no neoantigens called.')
    #     return

    if os.path.islink(final_link_path):
        os.unlink(final_link_path)
    os.symlink(relpath(fpath, dirname(final_link_path)), final_link_path)

    lines, epitopes, muts, genes, hlas = _pvac_seq_tsv_stats(fpath)

    logger.info(f'{kind}:')
    logger.info(f'  - {epitopes} epitopes from {muts} variants in '
                f'{genes} genes in context of {hlas} HLA alleles.')
    logger.info(f'  - file: {fpath}')


if __name__ == '__main__':
    main()
