#!/usr/bin/env python
import os
import sys
from os.path import isfile, join, dirname, abspath, relpath
from pathlib import Path
import click
import csv
import subprocess

from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import verify_file, safe_mkdir, verify_dir
from ngs_utils import logger
from ngs_utils.logger import warn, info
from ngs_utils.utils import set_locale; set_locale()
from ngs_utils import snakemake_utils
from reference_data import api as refdata

from nag import package_path


@click.command()
@click.option('-v', '--somatic-vcf', 'somatic_vcf', type=click.Path())
@click.option('-s', '--sample', 'sample')
@click.option('-R', '--rna-bcbio', 'rna_bcbio', type=click.Path())
@click.option('-r', '--rna-sample', 'rna_sample')
@click.option('-H', '--hla-file', 'hla_file')
@click.option('-T', '--target', 'include_stages', multiple=True,
              help='Optionally, specific stage to run')
@click.option('-E', '--skip-target', 'exclude_stages', multiple=True,
              help='Optionally, stages to skip, e.g.: -E oncoviruses -E cpsr')
@click.option('-o', 'output_dir', type=click.Path(), help='Output directory (default is "umccrise")')
@click.option('--ensembl-release', 'ensembl_release')
@click.option('--pizzly-ref-fa', 'pizzly_ref_fa', type=click.Path(), help='Pizzly transcriptome fasta reference for requantification,'
              'e.g. /g/data/gx8/projects/Saveliev_APGI/LTS/RNA/local_rnaseq/work/pizzly/hg38-noversions.fa')
@click.option('--min-tvaf',
              help='Miniaml AF of tumor mutations (both in DNA and RNA). Default is 10 (%). '
                   'Set if you know sample tumor purity.')

@click.option('-j', '--jobs', 'jobs', default=1,
              help='Maximum number of cores to use at single time (works both for local and cluster runs)')
@click.option('-c', '--cluster-auto', 'cluster', is_flag=True, help='Submit jobs to cluster')
@click.option('--unlock', 'unlock', is_flag=True, help='Propagaded to snakemake')
@click.option('--restart-times', 'restart_times', default=0, help='Propagaded to snakemake.')
@click.option('--genomes', '--genomes-dir', 'input_genomes_url', help='Path to the reference data. Can be s3 or gds')

def main(somatic_vcf, sample, rna_bcbio=None, rna_sample=None, hla_file=None,
         include_stages:list = None, exclude_stages:list = None, output_dir=None,
         ensembl_release=None, pizzly_ref_fa=None, min_tvaf=None, jobs=None, cluster=False, unlock=False,
         restart_times=None, input_genomes_url=None):
    output_dir = output_dir or 'neoantigens'
    output_dir = safe_mkdir(abspath(output_dir))
    log_dir = safe_mkdir(join(output_dir, 'log'))
    logger.init(log_fpath_=join(log_dir, 'neoantigens.log'), save_previous=True)

    conf = dict()

    # check hpc_utils can find the genomes dir, and error out if not
    genomes_dir = refdata.find_genomes_dir(input_genomes_url)
    conf['genomes_dir'] = genomes_dir

    # conf['dna_bcbio'] = verify_dir(dna_bcbio, is_critical=True)
    conf['sample'] = sample
    conf['somatic_vcf'] = somatic_vcf
    conf['hla_file'] = hla_file

    if rna_sample and rna_bcbio:
        conf['rna_sample'] = rna_sample
        conf['rna_bcbio'] = rna_bcbio
    else:
        if 'pvacfuse' in include_stages:
            logger.critical('Cannot run pVACfuse without RNA data')
        target_rule = ['pvacseq']

    if ensembl_release:
        conf['ensembl_release'] = ensembl_release
    elif os.environ.get('ENSEMBL_VERSION'):
        conf['ensembl_release'] = os.environ.get('ENSEMBL_VERSION')

    if pizzly_ref_fa:
        conf['pizzly_ref_fa'] = pizzly_ref_fa
    elif os.environ.get('PIZZLY_REF_FA'):
        conf['pizzly_ref_fa'] = os.environ.get('PIZZLY_REF_FA')

    if min_tvaf:
        conf['min_tvaf'] = min_tvaf

    #########################
    #### Setting cluster ####
    #########################

    cluster_log_dir = ''
    cluster_param = ''
    if cluster:
        cluster_log_dir = safe_mkdir(join(log_dir, 'cluster'))
        cluster_param = snakemake_utils.make_cluster_cmdl(cluster_log_dir, 'neoantigens')

    ###############################
    #### Building command line ####
    ###############################

    snakefile = join(package_path(), 'Snakefile')
    cmd = (
        f'snakemake '
        f'{" ".join(include_stages)} '
        f'--snakefile {snakefile} '
        f'--printshellcmds '
        f'--directory {output_dir} '
        f'-j {jobs} '
        f'--rerun-incomplete ' 
        f'--restart-times {restart_times} '
        f'{cluster_param} '
        f'--config {" ".join(k + "=" + v for k, v in conf.items())} '
    )

    #################
    #### Running ####
    #################

    def _append_sm_log():
        """ Snamemake writes its logs into a file like .snakemake/log/2018-09-16T113043.208368.snakemake.log
            We wanto to append its contents to our log file
        """
        sm_log_dir = join(output_dir, '.snakemake', 'log')
        sm_logs = sorted(Path(sm_log_dir).iterdir(), key=lambda fp: fp.stat().st_mtime)
        if sm_logs:
            with open(sm_logs[-1]) as fh:
                logger._write_to_file(fh.read())
                logger.info(f'Written snakemake log {sm_logs[0]} to {logger.log_fpath}')

    if unlock:
        logger.info('* Unlocking previous run... *')
        run_simple(cmd + ' --unlock')
        logger.info('* Now rerunning *')

    try:
        run_simple(cmd)

    except subprocess.CalledProcessError:
        _append_sm_log()
        logger.error('-' * 60)
        logger.error(f'Error running NAG: snakemake returned a non-zero status. Working directory: {output_dir}')
        if cluster_log_dir:
            logger.error(f'Review cluster job logs in {cluster_log_dir}')

    else:
        _append_sm_log()
        logger.info('-' * 60)
        logger.info(f'Finished.')
        logger.info(f'-' * 60)
        logger.info()

        sample = sample
        mut_calls_mhc1 = join(output_dir, f'pvacseq_results/MHC_Class_I/{sample}.filtered.condensed.ranked.tsv')
        mut_calls_mhc2 = join(output_dir, f'pvacseq_results/MHC_Class_II/{sample}.filtered.condensed.ranked.tsv')
        fus_calls_mhc1 = join(output_dir, f'pvacfuse_results/MHC_Class_I/{sample}.filtered.condensed.ranked.tsv')
        fus_calls_mhc2 = join(output_dir, f'pvacfuse_results/MHC_Class_II/{sample}.filtered.condensed.ranked.tsv')

        if not include_stages or 'pvacseq' in include_stages or 'all' in include_stages:
            _report(mut_calls_mhc1, 'SNPs and indels, MHC Class I',  join(output_dir, 'snps_and_indels_mhcI.tsv'))
            _report(mut_calls_mhc2, 'SNPs and indels, MHC Class II', join(output_dir, 'snps_and_indels_mhcII.tsv'))
        if not include_stages or 'pvacfuse' in include_stages or 'all' in include_stages:
            _report(fus_calls_mhc1, 'Fusions, MHC Class I',  join(output_dir, 'fusions_mhcI.tsv'))
            _report(fus_calls_mhc2, 'Fusions, MHC Class II', join(output_dir, 'fusions_mhcII.tsv'))
    finally:
        # adding read permissions to cluster logs
        subprocess.call(f'chmod -R a+r {log_dir}', shell=True)


def _pvac_seq_tsv_stats(fpath):
    muts = set()
    total_lines = 0
    epitopes = set()
    genes = set()
    hlas = set()

    with open(fpath) as fh:
        try:
            fieldnames = next(fh).strip().split('\t')
        except:  # empty file = no neoantigens called
            pass
        else:
            csv_reader = csv.DictReader(fh, delimiter='\t', fieldnames=fieldnames)
            for entry in csv_reader:
                total_lines += 1
                epitopes.add(entry['MT Epitope Seq'])
                genes.add(entry['Gene Name'])
                hlas.add(entry['HLA Allele'])

    pre_ranked_fpath = fpath.replace('.filtered.condensed.ranked.tsv', '.filtered.tsv')
    if isfile(pre_ranked_fpath):
        with open(pre_ranked_fpath) as fh:
            try:
                fieldnames = next(fh).strip().split('\t')
            except:  # empty file = no neoantigens called
                pass
            else:
                csv_reader = csv.DictReader(fh, delimiter='\t', fieldnames=fieldnames)
                for entry in csv_reader:
                    muts.add((entry['Chromosome'], entry['Start'], entry['Stop']))

    return total_lines, len(epitopes), len(muts), len(genes), len(hlas)


def _report(fpath, kind, final_link_path):
    # if not verify_file(fpath, silent=True):
    #     logger.info(f'{kind}: no neoantigens called.')
    #     return

    if os.path.islink(final_link_path):
        os.unlink(final_link_path)
    os.symlink(relpath(fpath, dirname(final_link_path)), final_link_path)

    lines, epitopes, muts, genes, hlas = _pvac_seq_tsv_stats(fpath)

    logger.info(f'{kind}:')
    logger.info(f'  - {epitopes} epitopes from {muts} variants in '
                f'{genes} genes in context of {hlas} HLA alleles.')
    logger.info(f'  - file: {fpath}')


if __name__ == '__main__':
    main()
