import os

shell.executable(os.environ.get('SHELL', 'bash'))
shell.prefix("")

from os.path import join, abspath, dirname, isfile, basename, splitext
from ngs_utils.bcbio import BcbioProject
from ngs_utils.logger import critical, info, debug, warn, err
from ngs_utils.file_utils import verify_file
from hpc_utils.hpc import get_ref_file


DNA_BCBIO   = config['dna_bcbio']
DNA_SNAME   = config.get('dna_sample')
RNA_BCBIO   = config.get('rna_bcbio')
RNA_SNAME   = config.get('rna_sample')

SNAME = DNA_SNAME or RNA_SNAME
out_dir   = join('pvac')
work_dir  = join('pvac', 'work')


loc = find_loc()
ENSEMBL_DIR = config.get('ensembl_dir', loc.ensembl_dir)
VEP_DATA    = config.get('vep_data', loc.vep_data)
IEDB_DIR    = config.get('iedb_dir', loc.iedb_dir)
GTF         = join(ENSEMBL_DIR, 'Homo_sapiens.GRCh38.86.gtf.gz')
GENE_PRED   = join(ENSEMBL_DIR, 'Homo_sapiens.GRCh38.86.genePred')
PRIMARY_FA  = join(ENSEMBL_DIR, 'primary_assembly', 'Homo_sapiens.GRCh37.75.dna_sm.primary_assembly.fa')


################################################
### hg38 DNA Project. Required for HLA typing.

dna_run = BcbioProject(DNA_BCBIO, include_samples=[DNA_SNAME])
assert dna_run.genome_build == 'hg38'
if len(dna_run.batch_by_name) == 0:
    critical(f'Error: could not find a sample with the name {DNA_SNAME}. Check yaml file for available options: {dna_run.bcbio_yaml_fpath}')
# Batch objects index by tumor sample names
batches = [b for b in dna_run.batch_by_name.values() if not b.is_germline() and b.tumor and b.normal]
assert len(batches) == 1
batch = batches[0]


rule all:
    input: join(out_dir, SNAME + '_from_mutations.tsv'),
           join(out_dir, SNAME + '_from_fusions.tsv'),
    
rule pvacseq:
    input:  dynamic(join(out_dir, SNAME, 'pvacseq_results' , 'MHC_Class_{mhc_class}', SNAME + '.final.tsv')),
    output: join(out_dir, SNAME + '_from_mutations.tsv')
    shell:  'cat {input} > {output}'

rule pvacfuse:
    input:  dynamic(join(out_dir, SNAME, 'pvacfuse_results' , 'MHC_Class_{mhc_class}', SNAME + '.final.tsv')),
    output: join(out_dir, SNAME + '_from_fusions.tsv')
    shell:  'cat {input} > {output}'


EPITOPE_LENGTHS = '9'  #'8,9,10,11'
PREDICTORS = 'NNalign'  # 'NNalign NetMHCIIpan NetMHCcons SMM SMMPMBEC SMMalign'


def _pvac_cmdl(tool, input, sample, hla_types, output_dir, other_params=''):
    return (f'{tool} run {input} {sample} "$(cat {hla_types})" {PREDICTORS} {output_dir} ' \
            f'-e {EPITOPE_LENGTHS} -t --top-score-metric=lowest --iedb-install-directory {IEDB_DIR} ' \
            f'--net-chop-method cterm --netmhc-stab --exclude-NAs {other_params} ')


##########################
### for both pVAC tools

t_optitype = join(batch.tumor.dirpath, batch.tumor.name + '-hla-optitype.csv')

rule prep_hla:
    """ Output file contains a single line of comma-separated HLA alleles
    """
    input:  t_optitype
    output: join(work_dir, SNAME, 'hla_line.txt')
    shell:  "cat {input} | grep -v ^sample | tr ',' '\t' | cut -f3 | tr ';' '\n' | sort -u | tr '\n' ',' | head -c -1 > {output}"


################
### for pVACseq

t_vcf = verify_file(join(dna_run.date_dir, f'{batch.name}-ensemble-annotated.vcf.gz'))

rule vcf_pon:
    input:  t_vcf
    output: join(work_dir, SNAME, 'somatic.PON.vcf')
    params: genome = 'hg38'
    shell:  'pon_anno -g {params.genome} {input} -h1 | bcftools view -f.,PASS -o {output}'
    
rule vcf_vep:
    input:  join(work_dir, SNAME, 'somatic.PON.vcf'),
            vep_data = VEP_DATA,
    output: join(work_dir, SNAME, 'somatic.PON.VEP.vcf')
    params: assembly = 'GRCh38'
    shell:  '''
    vep --input_file {input} --format vcf --output_file {output} --vcf \
    --pick --symbol --terms SO --plugin Downstream --plugin Wildtype \
    --cache --dir_cache {input.vep_data}/GRCh38 --dir_plugins {input.vep_data}/Plugins --assembly {params.assembly} --offline
    '''

rule vcf_select:
    input:  join(work_dir, SNAME, 'somatic.PON.VEP.vcf')
    output: join(work_dir, SNAME, 'somatic.PON.VEP.SELECT.vcf')
    params: sample = SNAME
    shell:  'bcftools view -s {params.sample} {input} > {output}'

rule run_pvacseq:
    input:  vcf               = join(work_dir, SNAME, 'somatic.PON.VEP.SELECT.vcf'),
            hla_types         = join(work_dir, SNAME, 'hla_line.txt'),
            extra_input       = join(work_dir, SNAME, 'additional_input_file_list.yaml'),
    output: out_files  = dynamic(join(out_dir, SNAME, 'pvacseq_results', 'MHC_Class_{mhc_class}', SNAME + '.final.tsv'))
    params: out_dir  = directory(join(out_dir, SNAME, 'pvacseq_results')),
            trna_vaf = 10,
    shell:  _pvac_cmdl('pvacseq', '{input.vcf}', SNAME, '{input.hla_types}', '{params.out_dir}', '--tdna-vaf {params.trna_vaf} -i {input.extra_input}')

t_bam = verify_file(batch.tumor.bam, silent=True)
if t_bam:
    pass
    # Check coverage?

if RNA_SNAME:
    rna_run = BcbioProject(RNA_BCBIO, include_samples=[RNA_SNAME])
    rna_sample = rna_run.samples[0]
    rna_bam = rna_sample.bam
    rna_tpkm = None
    rna_pizzly_prefix = join(rna_sample.dirpath, 'pizzly', RNA_SNAME)

    rule extract_snps:
        input:  join(work_dir, SNAME, 'somatic.PON.VEP.SELECT.vcf')
        output: join(work_dir, SNAME, 'somatic_snps_sites.txt'),
        shell: """bcftools view -v snps {input} | bcftools query -f "%CHROM \t %POS \n" | awk '{{ OFS="\t" }} {{ print $1,$2-1,$2 }}' > {output}"""

    rule extract_indels:
        input:  join(work_dir, SNAME, 'somatic.PON.VEP.SELECT.vcf')
        output: join(work_dir, SNAME, 'somatic_indels_sites.txt'),
        shell: """bcftools view -v indels {input} | bcftools query -f "%CHROM \t %POS \t %LEN \n" | awk '{{ OFS="\t" }}{{ print $1,$2-1,$2+$3-1 }}' > {output}"""

    rule rna_coverage_snps:
        input:  bam = rna_bam,
                sites = join(work_dir, SNAME, 'somatic_snps_sites.txt'),
                ref = REF_FA,
        output: join(work_dir, SNAME, 'rna_snps.readcount'),
        shell: '$BAM_READCOUNT -f {input.ref_fa} -w 1 -l {input.sites} {input.bam} > {output}'

    rule rna_coverage_indels:
        input:  bam = rna_bam,
                sites = join(work_dir, SNAME, 'somatic_indels_sites.txt'),
                ref = REF_FA,
        output: join(work_dir, SNAME, 'rna_indels.readcount'),
        shell: '$BAM_READCOUNT -f {input.ref_fa} -w 1 -l {input.sites} {input.bam} -i > {output}'

    rule rna_expression:
        input:  bam = rna_bam,
                gtf = GTF,
        output: dir    = directory(join(work_dir, SNAME, 'cufflinks')),
                genes_fpkm       = join(work_dir, SNAME, 'cufflinks', 'genes.fpkm_tracking'),
                transcripts_fpkm = join(work_dir, SNAME, 'cufflinks', 'isoforms.fpkm_tracking'),

        shell: 'cufflinks -p 30 -o {output.dir} {input.bam} --GTF {gtf}'

    rule pvacseq_extra_input:
        input:  gene_expn_file            = join(work_dir, SNAME, 'cufflinks', 'genes.fpkm_tracking'),
                transcript_expn_file      = join(work_dir, SNAME, 'cufflinks', 'isoforms.fpkm_tracking'),
                trna_snvs_coverage_file   = join(work_dir, SNAME, 'rna_snps.readcount'),
                trna_indels_coverage_file = join(work_dir, SNAME, 'rna_indels.readcount'),
        output:                             join(work_dir, SNAME, 'additional_input_file_list.yaml')
        shell:  """
            echo 'gene_expn_file:            {input.gene_expn_file}'            >> {output} &&
            echo 'transcript_expn_file:      {input.transcript_expn_file}'      >> {output} &&
            echo 'trna_snvs_coverage_file:   {input.trna_snvs_coverage_file}'   >> {output} &&
            echo 'trna_indels_coverage_file: {input.trna_indels_coverage_file}' >> {output}
        """

    #################
    ### for pVACfuse

    rule rna_pizzly_to_bedpe:
        input:  rna_pizzly_prefix + '-flat-filtered.tsv',
                rna_pizzly_prefix + '.json',
                rna_pizzly_prefix + '.fusions.fasta'
        params: prefix = rna_pizzly_prefix
        output: join(work_dir, SNAME, 'pizzly', SNAME + '.bedpe')
        shell:  'pizzly_to_bedpe.py {params.prefix} -o {output}'

    rule rna_anno_bedpe:
        input:  bedpe = join(work_dir, SNAME, 'pizzly', SNAME + '.bedpe'),
                ref_fasta = PRIMARY_ASSEMBLY,
                pred = GENE_PRED,
        params: dinuc = 'GT\tAG'
        output: join(work_dir, SNAME, 'pizzly', SNAME + '.anno.bedpe')
        shell:  """
    fusionBedpeAnnotator \
    --reference-file {input.ref_fasta} \
    --gene-annotation-file {input.pred} \
    --di-file <(echo {params.dinuc}) \
    --input-file {input.bedpe} \
    --output-file {output}
    """

    rule rna_subset_bedpe:
        input:  bedpe = join(work_dir, SNAME, 'pizzly', SNAME + '.anno.bedpe')
        params: rule = 'rule\t$(NF-4)!="NA" && $(NF-6)==1'
        output: join(work_dir, SNAME, 'pizzly', SNAME + '.anno.subset.bedpe')
        shell: """
    fusionBedpeSubsetter \
    --input-file {input.bedpe} \
    --rule-file <({params.rule}) \
    --output-file {output}
    """

    rule run_pvacfuse:
        input:  bedpe     = join(work_dir, SNAME, 'pizzly', SNAME + '.anno.subset.bedpe'),
                hla_types = join(work_dir, SNAME, 'hla_line.txt'),
        output: out_files  = dynamic(join(out_dir, SNAME, 'pvacfuse_results', 'MHC_Class_{mhc_class}', SNAME + '.final.tsv'))
        params: out_dir  = directory(join(out_dir, SNAME, 'pvacfuse_results'))
        shell:  _pvac_cmdl('pvacfuse', '{input.bedpe}', SNAME, '{input.hla_types}', '{params.out_dir}')



        